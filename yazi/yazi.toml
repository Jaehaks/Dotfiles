# A TOML linter such as https://taplo.tamasfe.dev/ can use this schema to validate your config.
# If you encounter any issues, please make an issue at https://github.com/yazi-rs/schemas.
"$schema" = "https://yazi-rs.github.io/schemas/yazi.json"

[mgr]
ratio          = [ 1, 4, 3 ]
sort_by        = "natural"
sort_sensitive = false
sort_reverse   = false
sort_dir_first = true
sort_translit  = false # for hungarian char
linemode       = "size_and_mtime"
show_hidden    = true
show_symlink   = false
scrolloff      = 5
mouse_events   = [ "click", "scroll" ]
title_format   = "Yazi: {cwd}"

[preview]
wrap			= "no"
tab_size        = 2
max_width       = 690
max_height      = 930 # image preview size is fixed under this value, and cannot adapt to terminal size
cache_dir       = ""
image_delay     = 30
image_filter    = "triangle"
image_quality   = 75 # doesn't works in windows-terminal
# sixel_fraction  = 15
ueberzug_scale  = 1
ueberzug_offset = [ 0, 0, 0, 0 ]

[opener]
# open file using terminal program like nvim without 'block = true', Error invokes
# 'orphan' keep the process even if yazi is exited, but it is regardless of setting when I open gui program
edit = [
	{ run = '${EDITOR:-vi} "$@"', block = true    , desc = "$EDITOR", for = "unix" }   ,
	{ run = 'nvim %*'           , block = true    , desc = "nvim"   , for = "windows" },
	{ run = 'nvim-qt %*'        , orphan = true   , desc = "nvim-qt", for = "windows" },
	{ run = 'excel /e "%1"'     , orphan = true   , desc = "excel",   for = "windows" },
]
open = [ # if folder, open explorer location under cursor
	{ run = 'xdg-open "$1"',                desc = "Open", for = "linux" },
	{ run = 'open "$@"',                    desc = "Open", for = "macos" },
	{ run = 'start "" "%1"', orphan = true, desc = "Open", for = "windows" },
	{ run = 'termux-open "$1"',             desc = "Open", for = "android" },
]
pdfopen = [
	# { run = 'sumatraPDF "%1"', orphan = true, desc = "SumatraPDF", for = "windows" },
	{ run = 'sioyek --new-window "%1"', orphan = true, desc = "sioyek", for = "windows" },
]
reveal = [ # if folder, open explorer current location
	{ run = 'xdg-open "$(dirname "$1")"',           desc = "Reveal", for = "linux" },
	{ run = 'open -R "$1"',                         desc = "Reveal", for = "macos" },
	{ run = 'explorer /select,"%1"', orphan = true, desc = "Reveal", for = "windows" },
	{ run = 'termux-open "$(dirname "$1")"',        desc = "Reveal", for = "android" },
	{ run = '''exiftool "$1"; echo "Press enter to exit"; read _''', block = true, desc = "Show EXIF", for = "unix" },
]
extract = [
	{ run = 'ya pub extract --list "$@"', desc = "Extract here", for = "unix" },
	# { run = 'bandizip bx -target:auto %*',   desc = "Extract here", for = "windows" },
	{ run = '7z x -aoa -o* %*',   desc = "Extract here", for = "windows" },
]
play = [
	{ run = 'mpv --force-window "$@"', orphan = true, for = "unix" },
	{ run = 'start "" "%1"', orphan = true,  for = "windows" },
	{ run = '''mediainfo "$1"; echo "Press enter to exit"; read _''', block = true, desc = "Show media info", for = "unix" },
]

[open] # set rules for opening for specific file + show open list
# mime is detected by `file --mime-type {}` function
rules = [
	# Folder
	{ name = "*/", use = [ "open", "reveal" ] }, # open explorer of current selected directory
	# user: unknown file extension (some files are recognized as octet_stream like binary)
	{ name = "application/octet-stream", use = [ "edit", "reveal" ] },
	{ name = "*.{config}", use = [ "edit", "reveal" ] },
	# csv
	{ mime = "text/csv", use = [ "open", "reveal" ] },
	# Text
	{ mime = "text/*", use = [ "edit", "reveal" ] },
	# Image
	{ mime = "image/*", use = [ "open", "reveal" ] },
	# Media
	{ mime = "{audio,video}/*", use = [ "play", "reveal" ] },
	# Archive
	{ mime = "application/{,g}zip", use = [ "extract", "reveal" ] },
	{ mime = "application/{tar,bzip*,x-7z-compressed,xz,rar}", use = [ "extract", "reveal" ] },
	# JSON
	{ mime = "application/{json,ndjson}", use = [ "edit", "reveal" ] },
	{ mime = "*/javascript", use = [ "edit", "reveal" ] },
	# pdf
	{ mime = "application/pdf", use = [ "pdfopen", "open" ] },
	# Empty file
	{ mime = "inode/empty", use = [ "edit", "reveal" ] },
	# Fallback
	{ name = "*", use = [ "open", "reveal" ] },
]

[tasks]
micro_workers    = 10
macro_workers    = 25 # (macro_workers, bizarre_retry) = (10,3) at default because of conservative value for USB flash drives
bizarre_retry    = 5
image_alloc      = 536870912  # 512MB
image_bound      = [ 5000, 5000 ] # change from (0,0) for limiting memory of large image preview
suppress_preload = false

[plugin]

prepend_fetchers = [
	{ id = "mime", name = "*", run = "mime-ext", if = "!mime", prio = "high" },
]
fetchers = [
	# Mimetype
	{ id = "mime", name = "*", run = "mime", if = "!mime", prio = "high" },
	# plugins - git.yazi
	{ id = "git", name = "*", run = "git"},
	{ id = "git", name = "*/", run = "git"},
	{ id = "githead", name = "*", run = "githead"},
	{ id = "githead", name = "*/", run = "githead"},
]
spotters = [
	{ name = "*/", run = "folder" },
	# Code
	# { mime = "text/*", run = "code" },
	# { mime = "application/{mbox,javascript,wine-extension-ini}", run = "code" },
	# Image
	# { mime = "image/{avif,hei?,jxl}", run = "magick" },
	# { mime = "image/svg+xml", run = "svg" },
	# { mime = "image/*", run = "image" },
	# Video
	# { mime = "video/*", run = "video" },
	# Fallback
	# { name = "*", run = "file" },
]
append_spotters = [
	{ name = '*', run = "file-extra-metadata" }, # plugin : file-extra-metadata
]
preloaders = [
	# Image
	{ mime = "image/{avif,hei?,jxl}", run = "magick" },
	{ mime = "image/svg+xml", run = "svg" },
	{ mime = "image/*", run = "image" },
	# Video
	{ mime = "video/*", run = "video" },
	# PDF
	{ mime = "application/pdf", run = "pdf" },
	# Font
	{ mime = "font/*", run = "font" },
	{ mime = "application/ms-opentype", run = "font" },
]
prepend_previewers = [
	# plugin : lsar.yazi / preview zip file
	{ mime = "application/x-{tar,bzip*,7z-compressed,rar,xz}" , run = "lsar" }, # for zip
	{ mime = "application/{,g}zip" , run = "lsar" }, # for zip
]
previewers = [
	# { name = "*/", run = "folder", sync = true },
	{ name = "*/", run = "folder" },
	# Code
	{ mime = "text/*", run = "code" },
	{ mime = "application/{mbox,javascript,wine-extension-ini}", run = "code" },
	# JSON
	{ mime = "application/{json,ndjson}", run = "json" },
	# Image
	{ mime = "image/{avif,hei?,jxl}", run = "magick" },
	{ mime = "image/svg+xml", run = "svg" },
	{ mime = "image/*", run = "image" },
	# Video
	{ mime = "video/*", run = "video" },
	# PDF
	{ mime = "application/pdf", run = "pdf" },
	# Archive
	{ mime = "application/{zip,rar,7z*,tar,gzip,xz,zstd,bzip*,lzma,compress,archive,cpio,arj,xar,ms-cab*}", run = "archive" },
	{ mime = "application/{debian*-package,redhat-package-manager,rpm,android.package-archive}", run = "archive" },
	{ name = "*.{AppImage,appimage}", run = "archive" },
	# Virtual Disk / Disk Image
	{ mime = "application/{iso9660-image,qemu-disk,ms-wim,apple-diskimage}", run = "archive" },
	{ mime = "application/virtualbox-{vhd,vhdx}", run = "archive" },
	{ name = "*.{img,fat,ext,ext2,ext3,ext4,squashfs,ntfs,hfs,hfsx}", run = "archive" },
	# Font
	{ mime = "font/*", run = "font" },
	{ mime = "application/ms-opentype", run = "font" },
	# Empty file
	{ mime = "inode/empty", run = "empty" },
	# Fallback
	# { name = "*", run = "filename" },
]
append_previewers = [
	{ name = "*" , run = "file-extra-metadata" }, # plugin : file-extra-metadata
]


[input]
cursor_blink = false

# cd
cd_title  = "Change directory:"
cd_origin = "top-center"
cd_offset = [ 0, 2, 50, 3 ]

# create
create_title  = [ "Create:", "Create (dir):" ]
create_origin = "top-center"
create_offset = [ 0, 2, 50, 3 ]

# rename
rename_title  = "Rename:"
rename_origin = "hovered"
rename_offset = [ 0, 1, 50, 3 ]

# filter
filter_title  = "Filter:"
filter_origin = "top-center"
filter_offset = [ 0, 2, 50, 3 ]

# find
find_title  = [ "Find next:", "Find previous:" ]
find_origin = "top-center"
find_offset = [ 0, 2, 50, 3 ]

# search
search_title  = "Search via {n}:"
search_origin = "top-center"
search_offset = [ 0, 2, 50, 3 ]

# shell
shell_title  = [ "Shell:", "Shell (block):" ]
shell_origin = "top-center"
shell_offset = [ 0, 2, 50, 3 ]

[confirm]
# trash
trash_title 	= "Trash {n} selected file{s}?"
trash_origin	= "center"
trash_offset	= [ 0, 0, 70, 20 ]

# delete
delete_title 	= "Permanently delete {n} selected file{s}?"
delete_origin	= "center"
delete_offset	= [ 0, 0, 70, 20 ]

# overwrite
overwrite_title   = "Overwrite file?"
overwrite_content = "Will overwrite the following file:"
overwrite_origin  = "center"
overwrite_offset  = [ 0, 0, 50, 15 ]

# quit
quit_title   = "Quit?"
quit_content = "The following tasks are still running, are you sure you want to quit?"
quit_origin  = "center"
quit_offset  = [ 0, 0, 50, 15 ]

[pick]
open_title  = "Open with:"
open_origin = "hovered"
open_offset = [ 0, 1, 50, 7 ]

[which]
sort_by        = "none"
sort_sensitive = false
sort_reverse   = false
sort_translit  = false
